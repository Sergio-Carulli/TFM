"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorHttpFetch = void 0;
const bus_http_1 = require("@comunica/bus-http");
const context_entries_1 = require("@comunica/context-entries");
require("cross-fetch/polyfill");
const FetchInitPreprocessor_1 = require("./FetchInitPreprocessor");
/**
 * A node-fetch actor that listens on the 'init' bus.
 *
 * It will call `fetch` with either action.input or action.url.
 */
class ActorHttpFetch extends bus_http_1.ActorHttp {
    constructor(args) {
        super(args);
        this.userAgent = ActorHttpFetch.createUserAgent();
        this.fetchInitPreprocessor = new FetchInitPreprocessor_1.FetchInitPreprocessor(args.agentOptions);
    }
    static createUserAgent() {
        return `Comunica/actor-http-fetch (${typeof global.navigator === 'undefined' ?
            `Node.js ${process.version}; ${process.platform}` :
            `Browser-${global.navigator.userAgent}`})`;
    }
    async test(action) {
        return { time: Number.POSITIVE_INFINITY };
    }
    run(action) {
        // Prepare headers
        const initHeaders = action.init ? action.init.headers || {} : {};
        action.init = action.init ? action.init : {};
        action.init.headers = new Headers(initHeaders);
        if (!action.init.headers.has('user-agent')) {
            action.init.headers.append('user-agent', this.userAgent);
        }
        const authString = action.context.get(context_entries_1.KeysHttp.auth);
        if (authString) {
            action.init.headers.append('Authorization', `Basic ${Buffer.from(authString).toString('base64')}`);
        }
        // Log request
        this.logInfo(action.context, `Requesting ${typeof action.input === 'string' ?
            action.input :
            action.input.url}`, () => ({
            headers: bus_http_1.ActorHttp.headersToHash(new Headers(action.init.headers)),
            method: action.init.method || 'GET',
        }));
        // TODO: remove this workaround once this has a fix: https://github.com/inrupt/solid-client-authn-js/issues/1708
        if (action.init?.headers && 'append' in action.init.headers && action.context.has(context_entries_1.KeysHttp.fetch)) {
            action.init.headers = bus_http_1.ActorHttp.headersToHash(action.init.headers);
        }
        // Perform request
        const customFetch = action
            .context?.get(context_entries_1.KeysHttp.fetch);
        return (customFetch || fetch)(action.input, this.fetchInitPreprocessor.handle({
            ...action.init,
            ...action.context.get(context_entries_1.KeysHttp.includeCredentials) ? { credentials: 'include' } : {},
        })).then(response => {
            // Node-fetch does not support body.cancel, while it is mandatory according to the fetch and readablestream api.
            // If it doesn't exist, we monkey-patch it.
            if (response.body && !response.body.cancel) {
                response.body.cancel = async (error) => {
                    response.body.destroy(error);
                };
            }
            return response;
        });
    }
}
exports.ActorHttpFetch = ActorHttpFetch;
//# sourceMappingURL=ActorHttpFetch.js.map