
// moduleConfig = {
// 	selector: '[data-navigation]',
// 	script: NavigationModule,
// 	template: '/path/to/template.twig'
// }

import twig from 'twig';
import * as core from './../core';
import log from './../core/log';
import templateController from './templateController';

let moduleCache = [];

export default {

	init(){
		log('ModuleController :: Init');
		this.modules = [];
	},

	// public

	addModule(handle, moduleConfig){

		this.modules.push(moduleConfig);

		if( moduleConfig.template ){
			templateController.getTemplate(handle, moduleConfig.template)
			.then((template)=>{
				// console.log('ModuleController :: Loaded template for', handle);
			});
		}
	},

	refresh(){

		let newModules = [];

		for(let i = this.modules.length; i--;){

			let mod = this.modules[ i ];

			if( mod.selector && mod.script ){

				core.dom.body.find(mod.selector)
					.each((i, el)=>{
						newModules.push(new mod.script(el));
					});
			}
		}

		requestAnimationFrame(()=>{
			this.destroyModules(moduleCache);
			moduleCache = newModules;
		});
	},

	destroyModules(_modules){

		for(let mod of _modules){

			if( mod._destroy ){
				mod._destroy();
			}
			else if( mod._addListeners ) {
				log('warn', 'ModuleController :: Module missing destroy method', mod);
			}
		}
	},

	renderModuleMarkup(moduleData){

		return new Promise((resolve, reject)=>{

			var html = '';

			for( let i = 0; i < moduleData.length; i ++ ){

				let module = moduleData[ i ];

				templateController.getTemplate(module.handle)
					.then((template)=>{
						html += template.render(module);

						if( i === (moduleData.length - 1) ){
							resolve(html);
						}
					})
					.catch(reject);
			}
		});
	}
}
