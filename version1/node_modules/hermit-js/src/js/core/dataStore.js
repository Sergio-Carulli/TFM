
import * as core from './';
import log from "./log";

const _session = window.sessionStorage;
let _token = 'app-cache';
let _cache = {};

export default class DataStore {

	constructor(opts){

		this.defaults = {
			enabled: true
		};

		this.options = Object.assign({}, this.options, opts);

		this.isSupported = (function () {
			let ret = true;

			try {
				_session.setItem("app-test", 1);
				_session.removeItem("app-test");
			} catch ( err ) {
				ret = false;
			}

			return ret;
		})()

		if ( core.env.isDev() || !this.options.enabled || !this.isSupported ) {
			log('warn', 'DataStore :: SessionStorage not enabled');
			this.flush();
			return;
		}

		// this.flush();
		if( this.options.enabled && this.isSupported ){
			_cache = JSON.parse(_session.getItem(_token)) || {};
		}
	}

	flush(){
		_cache = {};
		this.save();
	}

	save(){
		if ( core.env.isDev() || !this.options.enabled || !this.isSupported ) {
			return;
		}
		_session.setItem( _token, JSON.stringify( _cache ) );
	}

	slug(uri){
		uri = uri.replace( /^\/|\/$/g, "" ).replace( /\/|\?|\&|=|\s/g, "-" ).toLowerCase();
		return uri;
	}

	set(id, val){
		id = this.slug( id );
		_cache[ id ] = val;
		this.save();
	}

	get(id){
		id = (id && this.slug( id ));
		return (id ? this.getValue( _cache[ id ] ) : _cache);
	}

	getValue(val){
		const ret = val;
		return ret;
	}

	remove(id){
		delete _cache[ id ];
	}
}
